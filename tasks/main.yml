---
# commissioning block
- block:
  - name: "Create the vpc if it doesn't already exist."
    local_action:
      module: ec2_vpc_net
      name: "{{ vpc_name }}_{{ service_env }}"
      cidr_block: "{{ vpc_cidr }}"
      region: "{{ vpc_region }}"
    register: vpc

  - name: Set a fact for VPC ID
    set_fact:
      vpc_id: "{{ vpc.vpc.id }}"

  - name: "Confirm vpc created with correct cidr"
    assert:
      that:
        - "vpc.vpc.cidr_block == vpc_cidr"
      msg: "Unexpected cidr block assigned to VPC."

  - name: "Create public subnets"
    local_action:
      module: ec2_vpc_subnet
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
      cidr: "{{ item }}"
      az: "{{ vpc_region }}{{ vpc_public_subnet_azs[item] }}"
      tags:
        vpc: "{{ vpc_name }}_{{ service_env }}"
    with_items:
      - "{{ vpc_public_subnet_cidrs }}"
    register: public_subnets


  # it's hard to get fancy with dicts in ansible the way one might in python
  - name: "Confirm the right number of subnets were created"
    assert:
      that:
        - "public_subnets.results|length == vpc_public_subnet_cidrs|length"

  - name: "Extract subnet IDs..."
    get_subnet_ids:
      subnets: "{{ public_subnets.results }}"
    register: public_subnets

  - name: "... and publish to fact 'vpc_public_subnets'"
    set_fact:
      vpc_public_subnets: "{{public_subnets.subnets}}"

  - name: "Create internet gateway for public subnets"
    local_action:
      module: ec2_vpc_igw
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
    register: igw

  - name: "Confirm we got a valid gateway id"
    assert:
      that:
        - "igw.gateway_id != ''"
      msg: "Empty or non-existant internet gateway id. did the create fail silently?"

  - name: "Create route table for public subnets"
    local_action:
      module: ec2_vpc_route_table
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
      subnets: "{{ vpc_public_subnet_cidrs }}"
      tags:
        vpc: "{{ vpc_name }}_{{ service_env }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
    register: rtb
  when: "service_state == 'present'"

# Decommission block
- block:
  - name: Get VPC ID for teardown
    local_action:
      module: ec2_vpc_net_facts
      region: "{{ vpc_region }}"
      filters:
        "tag:Name": "{{ vpc_name }}_{{ service_env }}"
    register: vpcs

  - name: Set vpc_id fact from VPC information
    set_fact:
      vpc_id: "{{ vpcs.vpcs[0].id }}"

  - name: "Delete public subnets, retry up to 3 times to allow instances to terminate"
    ec2_vpc_subnet:
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
      cidr: "{{ item }}"
      state: absent
    with_items:
      - "{{ vpc_public_subnet_cidrs }}"
    register: result
    until: result|success
    retries: 3
    delay: 60

  - name: "Delete internet gateway for public subnets"
    ec2_vpc_igw:
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
      state: absent
  - name: Get list of route tables
    ec2_vpc_route_table_facts:
      region: "{{ vpc_region }}"
      filters:
        vpc-id: "{{ vpc_id }}"
    register: dec_rtbs

  # using a custom module here. nothing fancy. it looks at the route tables
  # dict provided by ansible's built-in module. checks for "main": true in any
  # of the rtb's associations. if present, mark it as False (for NO DELETE PLZ)
  # result is something like {'rtb-1234567': True, 'rtb-9876543': False}
  - name: Determine deleteable route tables
    rtb_deleteable:
      route_tables: "{{ dec_rtbs.route_tables }}"
    register: deleteable

  - debug: msg="{{deleteable.deleteable}}"

  # iterating over the dictionary here, key is our rtb id, and we use the value
  # to determine whether to run.
  - name: "Delete route table for public subnets"
    ec2_vpc_route_table:
      vpc_id: "{{ vpc_id }}"
      region: "{{ vpc_region }}"
      route_table_id: "{{ item.key }}"
      lookup: id  # searches by tag by default
      state: absent
    with_dict: "{{ deleteable.deleteable }}"
    when:
      - item.value



  - name: "Set VPC state to absent"
    ec2_vpc_net:
      name: "{{ vpc_name }}_{{ service_env }}"
      cidr_block: "{{ vpc_cidr }}"
      region: "{{ vpc_region }}"
      state: absent
    register: vpc
  when: "service_state == 'absent'"
